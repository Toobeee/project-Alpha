# -*- coding: utf-8 -*-
"""Github-v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FxtvJmmbttJnY1kK8VzAC5n2UCeKsHAw

# GitHub Workflow: Python Project Example

## 1. Introduction to Git and GitHub

### What is Git?
- Version control system to track changes in code.
- Allows you to collaborate efficiently with others.
- Keeps a history of all changes, which can be reverted or viewed later.

### What is GitHub?
- A cloud-based platform that hosts Git repositories.
- Allows for sharing and collaboration on projects.
- Provides additional features like issue tracking, pull requests, and more.

---

## 2. Benefits of Using GitHub

- **Version Control**: Keep track of code changes, work with teams, and manage multiple versions.
- **Collaboration**: Multiple developers can work on the same project without conflicts.
- **Backup**: Your code is stored remotely, acting as a backup.
- **Code Review**: Other team members can review code before merging to the main branch.
- **Public/Private Repositories**: Share your code publicly or keep it private.
- **Integration**: Easy integration with CI/CD, project management tools, etc.

---

## 3. Basic Git Commands

1. **Setting up Git**:
    ```bash
    git config --global user.name "Your Name"
    git config --global user.email "your.email@example.com"
    ```

2. **Creating a Local Repository**:
    ```bash
    git init
    ```

3. **Checking the Status**:
    ```bash
    git status
    ```

4. **Adding Files to Staging**:
    ```bash
    git add <file_name>
    # To add all files:
    git add .
    ```

5. **Committing Changes**:
    ```bash
    git commit -m "Commit message"
    ```

6. **Creating and Pushing to Remote Repository**:
    ```bash
    git remote add origin <repository_url>
    git push -u origin main
    ```

7. **Pulling Changes from Remote**:
    ```bash
    git pull origin main
    ```

8. **Branching and Switching Branches**:
    ```bash
    git checkout -b <branch_name>  # Create and switch to new branch
    git checkout <branch_name>     # Switch to an existing branch
    ```

9. **Merging Branches**:
    ```bash
    git merge <branch_name>  # Merge changes from a branch to the current branch
    ```

---

## 4. Practical Example: Python Project with GitHub

Let's create a small Python project, push it to GitHub, create a fork, add a new functionality, and then merge it back to the main branch.

---

### Step-by-Step Guide

1. **Create a Simple Python Project**

Let's assume you have a basic Python project like a simple script for calculating factorials.

```python
# factorial.py
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

if __name__ == "__main__":
    num = int(input("Enter a number: "))
    print(f"The factorial of {num} is {factorial(num)}")
"""

!git clone https://github.com/muhammadumair894/28-feb.git

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/28-feb

!python hello.py

for i in range(10):
  print(i)

# we ceated a fun this and that
def fun():


  print(" new functionality") # i created this line in version 4



  return

# we have made a change bla bla
def fun():
  print(" new functionality")

  return

"""# Github New br"""

!gh auth login

gti clone

make changes

git checkout -b new-branch-name
git branch

git add main.py

git add .

git config --global user.email "muhammadumair894@gmail.com"
git config --global user.name "muhammadumair894"

git commit -m "Added main.py with print"

git push origin uma

"""# Github"""

# Commented out IPython magic to ensure Python compatibility.
#initialize git in your project
# %cd /content/project
!git init

#add files to git
!git add factorial.py

!git config --global user.email "muhammadumair894@gmail.com"
!git config --global user.name "muhammadumair894"

#Commit the code
!git commit -m "First commit of factorial script"

"""Create a GitHub Repository
Go to GitHub and create a new repository (e.g., factorial-python). Don't initialize it with a README or .gitignore since we already have a local project.
"""

!git branch

!git remot -v

!git --help

!git remote set-url origin https://github.com/muhammadumair894/github.git

!git remote add origin https://github.com/muhammadumair894/github.git
!git push -u origin master

"""Forking the Repository and Adding New Functionality
Fork the Repository:

Go to the GitHub page of your repository.
Click on the "Fork" button in the upper-right corner to create your own copy of the repository.
Clone Your Fork Locally:

On the forked repo page, click "Clone" and copy the URL.
"""

!git clone https://github.com/muhammadumair894/github.git

# Commented out IPython magic to ensure Python compatibility.
# %cd github

#Create a New Branch for the New Feature:

#Let's say we want to add functionality to calculate factorials iteratively.

!git checkout -b iterative-factorial

def iterative_factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result
#save to factorial.py

#commit changes
!git add factorial.py
!git commit -m "Add iterative factorial function"

#push to branch
!git push origin iterative-factorial

"""Merging Changes Back to Main Branch (Pull Request)
Create a Pull Request (PR):

Go to the GitHub page of your repository.
You should see a message to create a pull request for your iterative-factorial branch.
Click "Compare & Pull Request", then add a description of your changes.
Submit the pull request.
Review the Pull Request:

You can now review your changes.
Once everything looks good, you or someone else can click "Merge Pull Request" to merge the changes into the main branch.

"""